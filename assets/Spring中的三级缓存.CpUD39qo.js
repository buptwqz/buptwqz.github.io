import{_ as L}from"./ValaxyMain.vue_vue_type_style_index_0_lang.tnXEyGKl.js";import{f as b,a as h}from"./chunks/vue-router.Coxe9doJ.js";import{A as f,N as u,a3 as a,U as r,S as t,W as n,u as k,O as y}from"./framework.DBZiiW_D.js";import"./app.C63hCeL4.js";import"./chunks/dayjs.CCYrSalk.js";import"./chunks/vue-i18n.C9-DimC-.js";import"./chunks/pinia.BBqn2ZBt.js";import"./chunks/@vueuse/motion.mfumzmzq.js";import"./chunks/nprogress.BahbDzmd.js";import"./YunComment.vue_vue_type_style_index_0_lang.DI8nccdU.js";import"./index.C5okkQwF.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.BnlOgV3o.js";import"./post.nythxEFp.js";const $=b("/posts/Spring中的三级缓存",async s=>JSON.parse('{"title":"ArrayList和LinkedList中的transient关键字和序列化","description":"","frontmatter":{"title":"ArrayList和LinkedList中的transient关键字和序列化","date":"2025-04-02","updated":"2025-04-02","categories":"后端开发","tags":["Java","后端开发"],"top":1},"headers":[],"relativePath":"pages/posts/Spring中的三级缓存.md","lastUpdated":1743644985000}'),{lazy:(s,o)=>s.name===o.name}),z={__name:"Spring中的三级缓存",setup(s,{expose:o}){var d;const{data:l}=$(),m=h(),i=Object.assign(m.meta.frontmatter||{},((d=l.value)==null?void 0:d.frontmatter)||{});return m.meta.frontmatter=i,f("pageData",l.value),f("valaxy:frontmatter",i),globalThis.$frontmatter=i,o({frontmatter:{title:"ArrayList和LinkedList中的transient关键字和序列化",date:"2025-04-02",updated:"2025-04-02",categories:"后端开发",tags:["Java","后端开发"],top:1}}),(e,p)=>{const c=L;return y(),u(c,{frontmatter:k(i)},{"main-content-md":a(()=>p[0]||(p[0]=[t("h4",{id:"arraylist和linkedlist中的一些变量被transient修饰",tabindex:"-1"},[n("ArrayList和LinkedList中的一些变量被transient修饰 "),t("a",{class:"header-anchor",href:"#arraylist和linkedlist中的一些变量被transient修饰","aria-label":'Permalink to "ArrayList和LinkedList中的一些变量被transient修饰"'},"​")],-1),t("p",null,"ArrayList里的elementData数组被transient修饰，LinkedList里的first和last被transient修饰。",-1),t("h4",{id:"序列化和反序列化",tabindex:"-1"},[n("序列化和反序列化 "),t("a",{class:"header-anchor",href:"#序列化和反序列化","aria-label":'Permalink to "序列化和反序列化"'},"​")],-1),t("p",null,"序列化是java提供的一种将内存中的对象信息转化为二进制数组的方法，可以将数组保存和传输，然后使用原来的类模板恢复对象的信息。 转化后的二进制数组中包含以下信息：序列化版本，完整类名，serialVersionUID，各个属性的类型、名字和值、父类信息。",-1),t("h4",{id:"实现方式",tabindex:"-1"},[n("实现方式 "),t("a",{class:"header-anchor",href:"#实现方式","aria-label":'Permalink to "实现方式"'},"​")],-1),t("p",null,"实现Serializable接口，使用ObjectOutputStream.writeObject(Object Object)写对象信息，使用ObjectInputStream.readObject()读对象信息。",-1),t("h4",{id:"transient关键字",tabindex:"-1"},[n("transient关键字 "),t("a",{class:"header-anchor",href:"#transient关键字","aria-label":'Permalink to "transient关键字"'},"​")],-1),t("p",null,"被transient修饰的成员变量不会被序列化。 1.为了节省存储空间和传输空间，有的变量可能不需要序列化。 2.持有引用的对象可以不被序列化，因为序列化后内存地址变了，这种情况下我们需要重新建立引用。",-1),t("h4",{id:"arraylist和linkedlist中的transient关键字和序列化",tabindex:"-1"},[n("ArrayList和LinkedList中的transient关键字和序列化 "),t("a",{class:"header-anchor",href:"#arraylist和linkedlist中的transient关键字和序列化","aria-label":'Permalink to "ArrayList和LinkedList中的transient关键字和序列化"'},"​")],-1),t("p",null,[n("ArrayList中使用数组transient Object[] elementData保存数据，当数组空间不够时，数组长度扩容为原来的1.5倍。那么数组中可能有没有使用的空间，比如elementData的长度时15，但是里面只装了11个元素，那么后面的4个元素都是空值。序列化的时候可以不把这4个元素序列化。"),t("br"),n(" ArrayList中定义了writeObject和readObject方法，实现了自定义序列化。序列化的时候，ObjectStream会判断类中有没有自定义序列化方法。如果有，使用自定义序列化方法：否则使用默认的序列化方法。"),t("br"),n(" LinkedList中使用双向链表保存数据，结点中保存前驱和后继的引用。但是序列化之后前序结点和后继结点的地址都变了，我们应该连接新的结点。LinkedList序列化的时候将链表按顺序拆分开来，仅序列化结点中保存的数据，反序列化的时候重新连接链表，保证了链表的有效性。")],-1)])),"main-header":a(()=>[r(e.$slots,"main-header")]),"main-header-after":a(()=>[r(e.$slots,"main-header-after")]),"main-nav":a(()=>[r(e.$slots,"main-nav")]),"main-content-before":a(()=>[r(e.$slots,"main-content-before")]),"main-content":a(()=>[r(e.$slots,"main-content")]),"main-content-after":a(()=>[r(e.$slots,"main-content-after")]),"main-nav-before":a(()=>[r(e.$slots,"main-nav-before")]),"main-nav-after":a(()=>[r(e.$slots,"main-nav-after")]),comment:a(()=>[r(e.$slots,"comment")]),footer:a(()=>[r(e.$slots,"footer")]),aside:a(()=>[r(e.$slots,"aside")]),"aside-custom":a(()=>[r(e.$slots,"aside-custom")]),default:a(()=>[r(e.$slots,"default")]),_:3},8,["frontmatter"])}}};export{z as default,$ as usePageData};
